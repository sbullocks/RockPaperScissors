Chrome Tools > Sources 

The Sources panel UI has 3 parts:
1.The File Navigator pane. Every file that the page requests is listed here.
2. The Code Editor pane. After selecting a file in the File Navigator pane, the contents of that file are displayed here.
3. The JavaScript Debugging pane. Various tools for inspecting the page's JavaScript. If your DevTools window is wide, this pane is displayed to the right of the Code Editor pane.

Pause the Code with a Breakpoint:
A breakpoint lets you pause your code in the middle of its execution, and examine all values at that moment in time.
With breakpoints, you can pause on the relevant code without even knowing how the code is structured.
With breakpoints, DevTools shows you the values of all variables at that moment in time.

Event Listener Breakpoints:
1. In the JavaScript Debugging pane, click Event Listener Breakpoints to expand the section. DevTools reveals a list of expandable event categories.
2. Next to the Mouse event category, click Expand Expand. DevTools reveals a list of mouse events, such as click and mousedown. Each event has a checkbox next to it.
3. Check the click checkbox. DevTools is now set up to automatically pause when any click event listener executes.
4. Back on the demo, click Add Number 1 and Number 2 again. DevTools pauses the demo and highlights a line of code in the Sources panel. DevTools should be paused on this line of code: function onClick() {

Step through the code:
One common cause of bugs is when a script executes in the wrong order. Stepping through your code enables you to walk through your code's execution, one line at a time, and figure out exactly where it's executing in a different order than you expected.
1. On the Sources panel of DevTools, click Step into next function call Step into next function call to step through the execution of the onClick() function, one line at a time. DevTools highlights the following line of code: if (inputsAreEmpty()) {
2. Click Step over next function call Step over next function call.. DevTools executes inputsAreEmpty() without stepping into it. Notice how DevTools skips a few lines of code. This is because inputsAreEmpty() evaluated to false, so the if statement's block of code didn't execute.

Set a line-of-code breakpoint:
Line-of-code breakpoints are the most common type of breakpoint. When you've got a specific line of code that you want to pause on, use a line-of-code breakpoint.
1. Look at the last line of code in updateLabel(): label.textContent = addend1 + ' + ' + addend2 + ' = ' + sum;
2. To the left of the code you can see the line number of this particular line of code, which is 32. Click on 32. DevTools puts a blue icon on top of 32. This means that there is a line-of-code breakpoint on this line. DevTools now always pauses before this line of code is executed.
3. Click Resume script execution Resume Script Execution. The script continues executing until it reaches line 32. On lines 29, 30, and 31, DevTools shows the values of addend1, addend2, and sum inline next to their declarations.
4. In this example, DevTools pauses on the line-of-code breakpoint on line 32.

Check Variable Values:
The values of addend1, addend2, and sum look suspicious. They're wrapped in quotes, which means that they're strings. This is a good hypothesis for the explaining the cause of the bug. Now it's time to gather more information. DevTools provides a lot of tools for examining variable values.

Method 1: The Scope Pane:
When you're paused on a line of code, the Scope pane shows you what local and global variables are currently defined, along with the value of each variable. It also shows closure variables, when applicable. Double-click a variable value to edit it. When you're not paused on a line of code, the Scope pane is empty.

Method 2: Watch Expressions:
The Watch Expressions tab lets you monitor the values of variables over time. As the name implies, Watch Expressions aren't just limited to variables. You can store any valid JavaScript expression in a Watch Expression. 
1. Click the Watch tab.
2. Click Add Expression Add Expression.
3. Type typeof sum.
4. Press Enter. DevTools shows typeof sum: "string". The value to the right of the colon is the result of your Watch Expression.
**As suspected, sum is being evaluated as a string, when it should be a number. You've now confirmed that this is the cause of the bug.**

Method 3: The Console:
In addition to viewing console.log() messages, you can also use the Console to evaluate arbitrary JavaScript statements. In terms of debugging, you can use the Console to test out potential fixes for bugs. 
1. If you don't have the Console drawer open, press Escape to open it. It opens at the bottom of your DevTools window.
2. In the Console, type parseInt(addend1) + parseInt(addend2). This statement works because you are paused on a line of code where addend1 and addend2 are in scope.
3. Press Enter. DevTools evaluates the statement and prints out 6, which is the result you expect the demo to produce.

Step 7: Apply a fix:
You've found a fix for the bug. All that's left is to try out your fix by editing the code and re-running the demo. You don't need to leave DevTools to apply the fix. You can edit JavaScript code directly within the DevTools UI. 
1. Click Resume script execution Resume Script Execution.
2. In the Code Editor, replace line 31, var sum = addend1 + addend2, with var sum = parseInt(addend1) + parseInt(addend2).
3. Press Command + S (Mac) or Control + S (Windows, Linux) to save your change.
4. Click Deactivate breakpoints Deactivate breakpoints. Its color changes to blue to indicate that it's active. While this is set, DevTools ignores any breakpoints you've set.
5. Try out the demo with different values. The demo now calculates correctly.


Overview of when to use each breakpoint type:
The most well-known type of breakpoint is line-of-code. But line-of-code breakpoints can be inefficient to set, especially if you don't know exactly where to look, or if you are working with a large codebase. You can save yourself time when debugging by knowing how and when to use the other types of breakpoints.
-Breakpoint Type: & When You Would Want to Use: 
-Line-of-code:	Pause on an exact region of code.
-Conditional line-of-code:	Pause on an exact region of code, but only when some other condition is true.
-Logpoint:	Log a message to the Console without pausing the execution.
-DOM	Pause: on the code that changes or removes a specific DOM node, or its children.
-XHR	Pause: when an XHR URL contains a string pattern.
-Event Listener:	Pause on the code that runs after an event, such as click, is fired.
-Exception	Pause: on the line of code that is throwing a caught or uncaught exception.
-Function Pause: whenever a specific function is called.
-Trusted Type:	Pause on Trusted Type violations.
